package a.b.c.com.login.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import a.b.c.com.common.K_Session;
import a.b.c.com.login.service.LoginService;
import a.b.c.com.member.vo.MemberVO;

import javax.mail.internet.MimeMessage;

import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.mail.javamail.MimeMessageHelper;

@Controller
public class LoginController {
	Logger logger = Logger.getLogger(LoginController.class);
	
	private LoginService loginSerivce;

	//생성자 오토와이어드
	@Autowired(required=false)
	public LoginController(LoginService loginSerivce) {
		this.loginSerivce = loginSerivce;
	}
	
	@Autowired
	private JavaMailSender mailSender;
	
	//로그인 입력 폼
	@GetMapping("loginForm")
	public String loginForm() {
		logger.info("LoginController loginForm() 함수 진입 >>> : ");
		return "login/loginForm";
	}
	
	//로그인
	@PostMapping("login")
	public String login(HttpServletRequest req, MemberVO mvo, Model model) {
		logger.info("LoginController login() 함수 진입 >>> : ");
		
		MemberVO.printVO(mvo);
		
		List<MemberVO> listLogin = loginSerivce.loginCheck(mvo);
		logger.info("LoginController login listLogin.size() >>> : " + listLogin.size());
		
		if(listLogin.size() == 1) {
			K_Session ks = K_Session.getInstance();	
			String kID = ks.getSession(req);
			
			if(kID != null && kID.equals(listLogin.get(0).getMid())) {
				logger.info("LoginController login >>> : 로그인 중 >>> : 다른 페이지로 이동하기 >>> : " + kID);
				model.addAttribute("listLogin", listLogin);
				return "main/mainPage";
			}else {
				ks.setSession(req, mvo.getMid());
				logger.info("LoginController login >>> : 세션부여하기 >>> : " + mvo.getMid());
				
				model.addAttribute("listLogin", listLogin);
				return "login/login";
			}
		}
		return "login/loginForm";		
	}
	
	//로그아웃
	@GetMapping("logout")
	public String logout(HttpServletRequest req, MemberVO mvo, Model model) {
		logger.info("LoginController logout() 함수 진입 >>> : ");
		MemberVO.printVO(mvo);
		K_Session ks = K_Session.getInstance();
		ks.killSession(req);
		
		return "login/logout";
	}
	
	//이메일로 아이디 찾기 시작------------------------------------------
	//아이디 찾기 입력 폼
	@GetMapping("idFindForm")
	public String idFind() {
		logger.info("LoginController idFind() 함수 진입 >>> : ");
		return "login/idFindForm";
	}
	
	//이메일 확인해서 아이디 찾기
	@GetMapping("email_authentication")
	@RequestMapping(value = "/email_authentication", method = RequestMethod.GET)
	public String email_authentication(MemberVO mvo, TempAuthNumVO tvo, Model model) throws Exception{
		logger.info("SpingLoginController email_authentication() 함수 진입 >>> : ");
		
		List<MemberVO> listEmail = loginSerivce.emailCheck(mvo);
		logger.info("LoginController email_authentication listEmail.size() >>> : " + listEmail.size());
		
		// 이메일이 확인되면 인증번호를 이메일로 인증번호 리턴하기 
		if (listEmail.size() == 1) {
			
			// 인증번호 만들기 
			String email_authentication_num = PasswordUtil.randomPW(6);
			logger.info("SpingLoginController email_authentication email_authentication_num >>> : " + email_authentication_num);
			
			// 인증번호를 테이블에 입력하기 TEMP_AUTH_NUM
			tvo.setAuthnum(email_authentication_num);
			int authNumCnt = loginSerivce.tempAuthNumInsert(tvo);
			
			// 인증번호가 TEMP_AUTH_NUM 입력되면 이메일 전송하기 
			// 이메일 전송 성공 여부는 ??? 
			if (authNumCnt == 1) {
				// TEMP_AUTH_NUM 테이블에 입력 성공된 인증번호 로 메일 보내기 
				email_authentication_num = tvo.getAuthnum();
		
			    String mailSubject = "ID 찾기 인증번호";
			    String sendMsg = email_authentication_num;
			    String sendMail = "123testmail4567@gmail.com";
			    String sendPw = "testmail1!";
			    String reviceMail = "chfhrskan10@naver.com";
			    
			    GoogleMailSend gms = new GoogleMailSend();
				//gms.googleMailSend(mailSubject, sendMail, sendPw, reviceMail, sendMsg);
        
		        try {
		            MimeMessage mail = mailSender.createMimeMessage();
		            MimeMessageHelper mailHelper = new MimeMessageHelper(mail,true,"UTF-8");
		            // true는 멀티파트 메세지를 사용하겠다는 의미
		            
		            /*
		             * 단순한 텍스트 메세지만 사용시엔 아래의 코드도 사용 가능 
		             * MimeMessageHelper mailHelper = new MimeMessageHelper(mail,"UTF-8");
		             */
		            
		            mailHelper.setFrom(sendMail);
		            // 빈에 아이디 설정한 것은 단순히 smtp 인증을 받기 위해 사용 따라서 보내는이(setFrom())반드시 필요
		            // 보내는이와 메일주소를 수신하는이가 볼때 모두 표기 되게 원하신다면 아래의 코드를 사용하시면 됩니다.
		            //mailHelper.setFrom("보내는이 이름 <보내는이 아이디@도메인주소>");
		            mailHelper.setTo(reviceMail);
		            mailHelper.setSubject(mailSubject);
		            mailHelper.setText(sendMsg, true);
		            // true는 html을 사용하겠다는 의미입니다.
		            
		            /*
		             * 단순한 텍스트만 사용하신다면 다음의 코드를 사용하셔도 됩니다. mailHelper.setText(content);
		             */
		           
		            mailSender.send(mail);
		            
		        } catch(Exception e) {
		            e.printStackTrace();
		        }
		             
		        return "login/idEmailCheck";
			}
		}		
			return "login/loginForm"; 
    }

	//인증번호 받아서 아이디 확인하기
	@GetMapping("idFind")
	public String idFind(MemberVO mvo, TempAuthNumVO tvo, Model model) {
		logger.info("LoginController idFind() 함수 진입 >>> : ");
		
		MemberVO.printVO(mvo);
		TempAuthNumVO.printVO(tvo);
		
		mvo.setTempauthmemail(tvo.getMemail());
		mvo.setTempauthnum(tvo.getAuthnum());
		List<MemberVO> listIdFind = loginSerivce.emailIdFind(mvo);
		logger.info("LoginController idFind listIdFind.size() >>> : " + listIdFind.size());
		
		if(listIdFind.size() == 1) {
			model.addAttribute("listIdFind", listIdFind);
			return "login/idFindOK";
		}
		return "login/idFindForm";
		
	}
	
	//이메일로 아이디 찾기 끝 ----------------------------------------------------
	
	//아이디로 비밀번호 찾기 시작 ----------------------------------------------------
	//비밀번호 찾기 입력폼
	@GetMapping("pwFindForm")
	public String pwFindForm() {
		logger.info("LoginController pwFind() 함수 진입 >>> : ");
		
		return "login/pwFindForm";
	}
	
	//비밀번호 찾기
	@GetMapping("pwIdFind")
	public String pwIdFind(MemberVO mvo, Model model) {
		logger.info("LoginController pwIdFind() 함수 진입 >>> : ");
		
		List<MemberVO> listPwId = loginSerivce.pwIdCheck(mvo);
		logger.info("LoginController pwIdFind listPwId.size() >>> : " + listPwId.size());
		
		return "login/pwTemp";
	}
	
	//아이디, 이메일을 확인해서 임시비밀번호 받기
	@GetMapping("id_email_authentication")
	public String id_authentication(MemberVO mvo, TempPwVO tvo, Model model) {
		logger.info("LoginController id_authentication() 함수 진입 >>> : ");
		
		//아이디, 이메일 체크 하기
		List<MemberVO> listIdEmail = loginSerivce.pwEmailCheck(mvo);
		logger.info("LoginController id_authentication listIdEmail.size() >>> : " + listIdEmail.size());
		
		if(listIdEmail.size() == 1) {
			//임시 비밀번호 (8자) 만들기
			String temp_pw_num = PasswordUtil.randomPW(8);
			logger.info("LoginController id_authentication temp_pw_num >>> : " + temp_pw_num);
			
			//임시 비밀번호 TEMP_PW 테이블에 입력하기
			tvo.setPtemppw(temp_pw_num);
			int tempPwCnt = loginSerivce.tempPwInsert(tvo);
			logger.info("LoginController id_authentication tempPwCnt >>> : " + tempPwCnt);
			
			//입력 성공하면 임시 비밀번호 이메일 보내기
			//메일 성공 여부는??
			if(tempPwCnt == 1) {
				// TEMP_AUTH_NUM 테이블에 입력 성공된 인증번호 로 메일 보내기
				temp_pw_num = tvo.getPtemppw();
				
				String mailSubject = "비밀번호 찾기 인증번호";
			    String sendMsg = temp_pw_num;
			    String sendMail = "123testmail4567@gmail.com";
			    String sendPw = "testmail1!";
			    String reviceMail = "chfhrskan10@naver.com";
				
				GoogleMailSend gms = new GoogleMailSend();
				gms.googleMailSend(mailSubject, sendMail, sendPw, reviceMail, sendMsg);
				
				//idFind 에 메세지 띄우기
				model.addAttribute(temp_pw_num, temp_pw_num);
				return "login/pwEmailCheck";
			}
		}
		
		return "login/loginForm";
	}
	
	//임시 비밀번호로 새 비밀번호 만들기
	@GetMapping("pwCreateForm")
	public String pwCreateForm(MemberVO mvo, TempPwVO tvo, Model model) {
		logger.info("LoginController pwCreateForm() 함수 진입 >>> : ");
		
		return "login/pwCreateForm";
	}
	
	//아이디로 비밀번호 찾기 끝 -----------------------------------------------------
}
